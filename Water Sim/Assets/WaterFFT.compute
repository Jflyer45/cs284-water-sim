// WaterFFT.compute

#pragma kernel CS_GenerateWaterMap

// OUTPUT
RWTexture2D<float> _DisplacementMap;

// INPUT
float _Time;
float _WaveAmplitude = 1.0;
float _WaveFrequency = 10.0;
float2 _WindDirection = float2(1, 0);
int _Resolution;

// Thread group: 8x8 threads.
[numthreads(8,8,1)]
void CS_GenerateWaterMap(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Resolution || id.y >= _Resolution)
        return;

    // UV coordinates in [0,1].
    float2 uv = float2(id.x, id.y) / _Resolution;

    // TODO this is just simple wave for now!!
    float wave1 = sin((uv.x * 10.0 + _Time) * _WaveFrequency);
    float wave2 = cos((uv.y * 10.0 + _Time) * _WaveFrequency);

    // "Sum of sines"
    float displacement = (wave1 + wave2) * 0.5 * _WaveAmplitude;

    // Not exactly right, but this kinda controls the direction of the waves.
    float2 centeredUV = uv - 0.5;
    float windInfluence = dot(normalize(centeredUV), normalize(_WindDirection));
    displacement *= lerp(0.5, 1.5, saturate(windInfluence));

    // red channel represents hieght
    _DisplacementMap[int2(id.xy)] = displacement;
}
